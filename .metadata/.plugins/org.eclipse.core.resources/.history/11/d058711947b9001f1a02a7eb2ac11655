import dao.HotelRoomDAO;
import model.Hotel;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * Servlet to handle hotel search with room types, based on provided criteria.
 */

public class SearchServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    private HotelRoomDAO hotelRoomDAO;

    /**
     * Default constructor
     */
    public SearchServlet() {
        super();
    }

    /**
     * Initializes the servlet
     */
    @Override
    public void init() throws ServletException {
        hotelRoomDAO = new HotelRoomDAO();
    }

    /**
     * Handles GET requests to search hotels with room types.
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String city = request.getParameter("city");
        String starsParam = request.getParameter("stars");
        String roomTypeLabel = request.getParameter("roomType");
        String capacityParam = request.getParameter("capacity");
        String minPriceParam = request.getParameter("minPrice");
        String maxPriceParam = request.getParameter("maxPrice");

        List<Hotel> hotels = new ArrayList<>();

        try {
            // Convert and valider les paramètres avec gestion de valeurs par défaut
            int stars = (starsParam != null && !starsParam.isEmpty()) ? Integer.parseInt(starsParam) : 0;
            int capacity = (capacityParam != null && !capacityParam.isEmpty()) ? Integer.parseInt(capacityParam) : 0;
            double minPrice = (minPriceParam != null && !minPriceParam.isEmpty()) ? Double.parseDouble(minPriceParam) : 0.0;
            double maxPrice = (maxPriceParam != null && !maxPriceParam.isEmpty()) ? Double.parseDouble(maxPriceParam) : Double.MAX_VALUE;

            hotels = hotelRoomDAO.getHotelsWithRoomTypes(city, stars, roomTypeLabel, capacity, minPrice, maxPrice);

            request.setAttribute("hotels", hotels);

            System.out.println("Number of hotels found: " + hotels.size());

            request.getRequestDispatcher("/views/index.jsp").forward(request, response);

        } catch (NumberFormatException e) {
            e.printStackTrace();
            request.setAttribute("message", "Invalid input parameters.");
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Input is invalid");
        } catch (SQLException e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error communicating with the database.");
        }
    }

    /**
     * Handles POST requests by delegating them to doGet.
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doGet(request, response);
    }
}
