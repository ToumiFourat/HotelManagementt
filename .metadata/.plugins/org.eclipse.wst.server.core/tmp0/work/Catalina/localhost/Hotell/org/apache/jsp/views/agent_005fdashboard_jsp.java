/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.33
 * Generated at: 2024-12-18 11:06:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.List;
import model.Hotel;
import model.Roomtype;

public final class agent_005fdashboard_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("model.Roomtype");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("model.Hotel");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Agent Dashboard</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        :root {\r\n");
      out.write("            --background-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n");
      out.write("            --card-background: rgba(255, 255, 255, 0.15);\r\n");
      out.write("            --text-primary: #ffffff;\r\n");
      out.write("            --text-secondary: rgba(255, 255, 255, 0.7);\r\n");
      out.write("            --input-background: rgba(255, 255, 255, 0.1);\r\n");
      out.write("            --border-color: rgba(255, 255, 255, 0.2);\r\n");
      out.write("            --table-header-gradient: linear-gradient(to right, #6a11cb 0%, #2575fc 100%);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        * {\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("            box-sizing: border-box;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: 'Inter', sans-serif;\r\n");
      out.write("            background: var(--background-gradient);\r\n");
      out.write("            min-height: 100vh;\r\n");
      out.write("            color: var(--text-primary);\r\n");
      out.write("            line-height: 1.6;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .container {\r\n");
      out.write("            width: 90%;\r\n");
      out.write("            max-width: 1200px;\r\n");
      out.write("            margin: 50px auto;\r\n");
      out.write("            padding: 30px;\r\n");
      out.write("            background: var(--card-background);\r\n");
      out.write("            border-radius: 20px;\r\n");
      out.write("            backdrop-filter: blur(15px);\r\n");
      out.write("            box-shadow: 0 25px 45px rgba(0, 0, 0, 0.1);\r\n");
      out.write("            border: 1px solid var(--border-color);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        h1, h2 {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            font-size: 2.5rem;\r\n");
      out.write("            margin-bottom: 30px;\r\n");
      out.write("            color: var(--text-primary);\r\n");
      out.write("            font-weight: 600;\r\n");
      out.write("            letter-spacing: -1px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .actions {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: flex-end;\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .actions button {\r\n");
      out.write("            background: var(--table-header-gradient);\r\n");
      out.write("            color: var(--text-primary);\r\n");
      out.write("            border: none;\r\n");
      out.write("            padding: 10px 20px;\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            font-size: 1rem;\r\n");
      out.write("            font-weight: 600;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            transition: transform 0.3s ease;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .actions button:hover {\r\n");
      out.write("            transform: translateY(-3px);\r\n");
      out.write("            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        table {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            border-collapse: separate;\r\n");
      out.write("            border-spacing: 0;\r\n");
      out.write("            background: rgba(255, 255, 255, 0.05);\r\n");
      out.write("            border-radius: 15px;\r\n");
      out.write("            overflow: hidden;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        thead {\r\n");
      out.write("            background: var(--table-header-gradient);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        th, td {\r\n");
      out.write("            padding: 15px;\r\n");
      out.write("            text-align: left;\r\n");
      out.write("            border-bottom: 1px solid var(--border-color);\r\n");
      out.write("            color: var(--text-primary);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        th {\r\n");
      out.write("            font-weight: 600;\r\n");
      out.write("            text-transform: uppercase;\r\n");
      out.write("            font-size: 0.9rem;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        tbody tr:hover {\r\n");
      out.write("            background-color: rgba(255, 255, 255, 0.1);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        img.hotel-image {\r\n");
      out.write("            max-width: 80px;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            transition: transform 0.2s;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        img.hotel-image:hover {\r\n");
      out.write("            transform: scale(1.1);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .btn-edit, .btn-delete {\r\n");
      out.write("            padding: 8px 12px;\r\n");
      out.write("            margin: 2px;\r\n");
      out.write("            border: none;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            color: white;\r\n");
      out.write("            font-weight: 600;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .btn-edit {\r\n");
      out.write("            background-color: #3498db;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .btn-edit:hover {\r\n");
      out.write("            background-color: #2980b9;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .btn-delete {\r\n");
      out.write("            background-color: #e74c3c;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .btn-delete:hover {\r\n");
      out.write("            background-color: #c0392b;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* Modal styling */\r\n");
      out.write("        .modal {\r\n");
      out.write("            display: none;\r\n");
      out.write("            position: fixed;\r\n");
      out.write("            top: 0;\r\n");
      out.write("            left: 0;\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            height: 100%;\r\n");
      out.write("            background: rgba(0, 0, 0, 0.8);\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            z-index: 1000;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .modal-content {\r\n");
      out.write("            position: relative;\r\n");
      out.write("            max-width: 80%;\r\n");
      out.write("            max-height: 80%;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .modal-content img {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            height: auto;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .modal-close {\r\n");
      out.write("            position: absolute;\r\n");
      out.write("            top: 10px;\r\n");
      out.write("            right: 10px;\r\n");
      out.write("            background: #e74c3c;\r\n");
      out.write("            color: white;\r\n");
      out.write("            border: none;\r\n");
      out.write("            padding: 10px 15px;\r\n");
      out.write("            border-radius: 50%;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            font-size: 18px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .modal-close:hover {\r\n");
      out.write("            background: #c0392b;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .actions {\r\n");
      out.write("            margin-bottom: 15px;\r\n");
      out.write("            text-align: right;\r\n");
      out.write("        }\r\n");
      out.write("        .hotel-image {\r\n");
      out.write("    max-width: 80px; /* Réduit la largeur de l'image */\r\n");
      out.write("    max-height: 60px; /* Ajuste la hauteur */\r\n");
      out.write("    border-radius: 5px; /* Ajoute des coins arrondis */\r\n");
      out.write("    cursor: pointer; /* Change le curseur sur hover */\r\n");
      out.write("    transition: transform 0.2s; /* Ajoute un effet d'agrandissement au survol */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".hotel-image:hover {\r\n");
      out.write("    transform: scale(1.1); /* Agrandit légèrement l'image au survol */\r\n");
      out.write("}\r\n");
      out.write(".logout-btn:hover {\r\n");
      out.write("            background-color: #c0392b;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <h1>Agent Dashboard</h1>\r\n");
      out.write("\r\n");
      out.write("         <!-- Section for managing hotels -->\r\n");
      out.write("        <div class=\"section\">\r\n");
      out.write("            <h2>Manage Hotels</h2>\r\n");
      out.write("            <div class=\"actions\">\r\n");
      out.write("            <button class=\"btn btn-add\" onclick=\"window.location.href='views/addHotel.jsp'\">Add Hotel</button>\r\n");
      out.write("            </div>\r\n");
      out.write("            <table>\r\n");
      out.write("                <thead>\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <th>ID</th>\r\n");
      out.write("                        <th>Name</th>\r\n");
      out.write("                        <th>City</th>\r\n");
      out.write("                        <th>Stars</th>\r\n");
      out.write("                        <th>Description</th>\r\n");
      out.write("                        <th>Image</th>\r\n");
      out.write("                        <th>Actions</th>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                </thead>\r\n");
      out.write("                <tbody>\r\n");
      out.write("                    ");

                        // Retrieve the list of hotels from the request attribute
                        List<Hotel> hotels = (List<Hotel>) request.getAttribute("hotels");
                        if (hotels != null && !hotels.isEmpty()) {
                            for (Hotel hotel : hotels) {
                    
      out.write("\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td>");
      out.print( hotel.getId() );
      out.write("</td>\r\n");
      out.write("                        <td>");
      out.print( hotel.getName() );
      out.write("</td>\r\n");
      out.write("                        <td>");
      out.print( hotel.getCity() );
      out.write("</td>\r\n");
      out.write("                        <td>");
      out.print( hotel.getStars() );
      out.write("</td>\r\n");
      out.write("                        <td>");
      out.print( hotel.getDescription() );
      out.write("</td>\r\n");
      out.write("                        <td>\r\n");
      out.write("    <img class=\"hotel-image\" src=\"uploads/");
      out.print(hotel.getImage());
      out.write("\" alt=\"Hotel\" onclick=\"openModal('uploads/");
      out.print(hotel.getImage());
      out.write("')\">\r\n");
      out.write("</td>\r\n");
      out.write("<td>\r\n");
      out.write("                            <button class=\"btn btn-edit\" onclick=\"window.location.href='views/editHotel.jsp?id=");
      out.print( hotel.getId() );
      out.write("'\">Edit</button>\r\n");
      out.write("                            <button class=\"btn btn-delete\" onclick=\"deleteHotel(");
      out.print( hotel.getId() );
      out.write(")\">Delete</button>\r\n");
      out.write("\r\n");
      out.write("                        </td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                    ");

                            }
                        } else {
                    
      out.write("\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td colspan=\"7\" style=\"text-align: center;\">No hotels available.</td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                    ");
 } 
      out.write("\r\n");
      out.write("                </tbody>\r\n");
      out.write("            </table>\r\n");
      out.write("        </div>\r\n");
      out.write("        \r\n");
      out.write("       <!-- Section for Room Types -->\r\n");
      out.write("<div class=\"section\">\r\n");
      out.write("    <h2>Manage Room Types</h2>\r\n");
      out.write("    <div class=\"actions\">\r\n");
      out.write("        <button class=\"btn btn-add\" onclick=\"window.location.href='views/addRoomType.jsp'\">Add Room</button>\r\n");
      out.write("    </div>\r\n");
      out.write("    <table>\r\n");
      out.write("        <thead>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th>ID</th>\r\n");
      out.write("                <th>Label</th>\r\n");
      out.write("                <th>Capacity</th>\r\n");
      out.write("                <th>Price</th>\r\n");
      out.write("                <th>Actions</th>\r\n");
      out.write("            </tr>\r\n");
      out.write("        </thead>\r\n");
      out.write("        <tbody>\r\n");
      out.write("            ");

                // Récupérer la liste des Room Types à partir de l'attribut de la requête
                List<Roomtype> rooms = (List<Roomtype>) request.getAttribute("rooms");
                if (rooms != null && !rooms.isEmpty()) {
                    for (Roomtype room : rooms) {
            
      out.write("\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>");
      out.print( room.getId() );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( room.getLabel() );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( room.getCapacity() );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( room.getPrix() );
      out.write(" TND</td>\r\n");
      out.write("                <td>\r\n");
      out.write("                    <button class=\"btn btn-edit\" onclick=\"window.location.href='views/editRoom.jsp?id=");
      out.print( room.getId() );
      out.write("'\">Edit</button>\r\n");
      out.write("                    <button class=\"btn btn-delete\" onclick=\"deleteRoom(");
      out.print( room.getId() );
      out.write(")\">Delete </button>\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            ");

                    }
                } else {
            
      out.write("\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td colspan=\"5\" style=\"text-align: center;\">No room types available.</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("        </tbody>\r\n");
      out.write("    </table>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("        \r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <!-- Modal -->\r\n");
      out.write("    <div class=\"modal\" id=\"imageModal\">\r\n");
      out.write("        <div class=\"modal-content\">\r\n");
      out.write("            <button class=\"modal-close\" onclick=\"closeModal()\">×</button>\r\n");
      out.write("            <img id=\"modalImage\" src=\"\" alt=\"Hotel Image\">\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("    function openModal(imageSrc) {\r\n");
      out.write("        const modal = document.getElementById('imageModal');\r\n");
      out.write("        const modalImage = document.getElementById('modalImage');\r\n");
      out.write("        modalImage.src = imageSrc;\r\n");
      out.write("        modal.style.display = 'flex';\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function closeModal() {\r\n");
      out.write("        const modal = document.getElementById('imageModal');\r\n");
      out.write("        modal.style.display = 'none';\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function deleteHotel(hotelId) {\r\n");
      out.write("        // Confirmer avant de supprimer\r\n");
      out.write("        if (confirm('Are you sure you want to delete this hotel?')) {\r\n");
      out.write("            // Utilisation de fetch pour appeler la servlet avec l'ID\r\n");
      out.write("            fetch('DeleteHotelServlet?id=' + hotelId, {\r\n");
      out.write("                method: 'GET', // Utilisation de GET pour la suppression\r\n");
      out.write("            })\r\n");
      out.write("            .then(response => response.text()) // Récupérer la réponse en texte\r\n");
      out.write("            .then(data => {\r\n");
      out.write("                // Vous pouvez rediriger ou afficher un message ici\r\n");
      out.write("                alert('Hotel deleted successfully!');\r\n");
      out.write("                // Vous pouvez aussi recharger la page ou mettre à jour l'interface\r\n");
      out.write("                location.reload();  // Recharge la page après suppression\r\n");
      out.write("            })\r\n");
      out.write("            .catch(error => {\r\n");
      out.write("                console.error('Error:', error);\r\n");
      out.write("                alert('Failed to delete hotel');\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function deleteRoom(roomId) {\r\n");
      out.write("        console.log('Room ID:', roomId); // Vérifiez que roomId est correct\r\n");
      out.write("        // Confirmer avant de supprimer\r\n");
      out.write("        if (confirm('Are you sure you want to delete this room?')) {\r\n");
      out.write("            // Utilisation de fetch pour appeler la servlet avec l'ID\r\n");
      out.write("            fetch('DeleteRoomTypeServlet?id=' + roomId, {\r\n");
      out.write("                method: 'GET', // Utilisation de GET pour la suppression\r\n");
      out.write("            })\r\n");
      out.write("            .then(response => response.text()) // Récupérer la réponse en texte\r\n");
      out.write("            .then(data => {\r\n");
      out.write("                // Vous pouvez rediriger ou afficher un message ici\r\n");
      out.write("                alert('Room deleted successfully!');\r\n");
      out.write("                // Vous pouvez aussi recharger la page ou mettre à jour l'interface\r\n");
      out.write("                location.reload();  // Recharge la page après suppression\r\n");
      out.write("            })\r\n");
      out.write("            .catch(error => {\r\n");
      out.write("                console.error('Error:', error);\r\n");
      out.write("                alert('Failed to delete room');\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("    function logout() {\r\n");
      out.write("        // Envoi de la requête pour déconnecter l'utilisateur\r\n");
      out.write("        window.location.href = 'logout';  // Redirige vers le servlet de déconnexion\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
