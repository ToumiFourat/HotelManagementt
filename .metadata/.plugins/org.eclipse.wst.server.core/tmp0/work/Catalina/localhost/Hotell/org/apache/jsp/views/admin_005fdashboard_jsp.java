/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.33
 * Generated at: 2024-12-18 10:14:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import model.Account;
import java.util.List;

public final class admin_005fdashboard_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("model.Account");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"fr\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Admin Dashboard</title>\r\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("    <style>\r\n");
      out.write("        :root {\r\n");
      out.write("            --background-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n");
      out.write("            --card-background: rgba(255, 255, 255, 0.15);\r\n");
      out.write("            --text-primary: #ffffff;\r\n");
      out.write("            --text-secondary: rgba(255, 255, 255, 0.7);\r\n");
      out.write("            --input-background: rgba(255, 255, 255, 0.1);\r\n");
      out.write("            --border-color: rgba(255, 255, 255, 0.2);\r\n");
      out.write("            --table-header-gradient: linear-gradient(to right, #6a11cb 0%, #2575fc 100%);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        * {\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("            box-sizing: border-box;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: 'Inter', sans-serif;\r\n");
      out.write("            background: var(--background-gradient);\r\n");
      out.write("            min-height: 100vh;\r\n");
      out.write("            color: var(--text-primary);\r\n");
      out.write("            line-height: 1.6;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .container {\r\n");
      out.write("            width: 90%;\r\n");
      out.write("            max-width: 1200px;\r\n");
      out.write("            margin: 50px auto;\r\n");
      out.write("            padding: 30px;\r\n");
      out.write("            background: var(--card-background);\r\n");
      out.write("            border-radius: 20px;\r\n");
      out.write("            backdrop-filter: blur(15px);\r\n");
      out.write("            box-shadow: 0 25px 45px rgba(0, 0, 0, 0.1);\r\n");
      out.write("            border: 1px solid var(--border-color);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        h1 {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            font-size: 2.5rem;\r\n");
      out.write("            margin-bottom: 30px;\r\n");
      out.write("            color: var(--text-primary);\r\n");
      out.write("            font-weight: 600;\r\n");
      out.write("            letter-spacing: -1px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .actions {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: flex-start;\r\n");
      out.write("            margin-bottom: 30px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .actions button {\r\n");
      out.write("            background: var(--table-header-gradient);\r\n");
      out.write("            color: var(--text-primary);\r\n");
      out.write("            border: none;\r\n");
      out.write("            padding: 12px 20px;\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            font-size: 1rem;\r\n");
      out.write("            font-weight: 600;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            transition: transform 0.3s ease;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .actions button:hover {\r\n");
      out.write("            transform: translateY(-3px);\r\n");
      out.write("            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        table {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            border-collapse: separate;\r\n");
      out.write("            border-spacing: 0;\r\n");
      out.write("            background: rgba(255, 255, 255, 0.05);\r\n");
      out.write("            border-radius: 15px;\r\n");
      out.write("            overflow: hidden;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        thead {\r\n");
      out.write("            background: var(--table-header-gradient);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        th, td {\r\n");
      out.write("            padding: 15px;\r\n");
      out.write("            text-align: left;\r\n");
      out.write("            border-bottom: 1px solid var(--border-color);\r\n");
      out.write("            color: var(--text-primary);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        th {\r\n");
      out.write("            font-weight: 600;\r\n");
      out.write("            text-transform: uppercase;\r\n");
      out.write("            font-size: 0.9rem;\r\n");
      out.write("            letter-spacing: 0.5px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        tbody tr {\r\n");
      out.write("            transition: background-color 0.3s ease;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        tbody tr:hover {\r\n");
      out.write("            background-color: rgba(255, 255, 255, 0.1);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        tbody tr:last-child td {\r\n");
      out.write("            border-bottom: none;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        @keyframes fadeIn {\r\n");
      out.write("            from { opacity: 0; }\r\n");
      out.write("            to { opacity: 1; }\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("    <h1>Tableau de bord d'administration</h1>\r\n");
      out.write("    <div class=\"actions\">\r\n");
      out.write("        <a href=\"views/addAgent.jsp\">\r\n");
      out.write("            <button>Ajouter un agent</button>\r\n");
      out.write("        </a>\r\n");
      out.write("    </div>\r\n");
      out.write("    <table>\r\n");
      out.write("        <thead>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th>ID</th>\r\n");
      out.write("                <th>Nom d'utilisateur</th>\r\n");
      out.write("                <th>E-mail</th>\r\n");
      out.write("            </tr>\r\n");
      out.write("        </thead>\r\n");
      out.write("        <tbody>\r\n");
      out.write("        ");

        // Récupérer la liste des agents depuis la requête
        List<Account> agents = (List<Account>) request.getAttribute("agents");

        if (agents != null && !agents.isEmpty()) {
            for (Account agent : agents) {
        
      out.write("\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>");
      out.print( agent.getId() );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( agent.getUsername() );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( agent.getEmail() );
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("        ");

            }
        } else {
        
      out.write("\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td colspan=\"3\">No agents available</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("        ");

        }
        
      out.write("\r\n");
      out.write("        </tbody>\r\n");
      out.write("    </table>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
